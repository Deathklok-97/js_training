
Laws of Programming (from experiences/reasoning/sources)
1. Don't pass a bool to change the behavior of a Function
2. Don't mutate parameters
3. Don't inherit for properties
4. Don't put logic in a setter
5. Don't put propositional logic in function definitions
6. Don't assign meaning to null
7. Don't negate in variable names 
8. Don't optimize prematurely
9. Always check the positive case

Things to remember
1. Complexity is incremental
2. Composition over Inheritance
3. Functions tell they do not ask


How to Develop an Application
----------------------------------------
Mnemonic: Do fun things with big loud worker bees
----------------------------------------
Workers-bees: pools/dependencies
Big: Boundaries (processes) | Loud: Lifecycle (Supervisors) | T hings
Fun: Functional Core (Logic)                                | e
Do: Data (models the domain)                                | s
                                                            | t
                                                            | s

Steps and Suggestion
Define most of the ACTIONS the application needs to take to complete a users task.
General objective is to move the side effects (actions that potentially fail) to the edge of the application.
The models should be concerned with the domain you're in, and the core is strictly comprised of pure functions surrounded by tests.
The Supervisors should have strategies for flaky or failing side effects and should respond appropriately.