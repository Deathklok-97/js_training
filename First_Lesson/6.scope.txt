Scope or Lexical Scope

    In js, each function gets its own scope. 
    Scope is basically a collection of variables as well as the rules for how those variables are accessed by name.


    function one() {
        //This `a` only belongs to the `one()` function
        var a = 1;

        console.log( a );
    }

    function two() {
        //this `a` only belongs to the `two()` function
        var a = 2;
        
        console.log( a );
    }

    one();
    two();

    A scope can be nested inside another scope, just like a nesting doll
    Lexical scope rules say that code in one scope can access variables of either that scope or any scope outside of it.

    function outer() {
        var a = 1;

        function inner() {
            var b = 2;

            //we can access both `a` and `b` here
            console.log( a + b);
        }

        inner();

        //we can only access `a` here
        console.log(a);

    }

    outer()