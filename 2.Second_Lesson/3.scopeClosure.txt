Scope Closure

    Closures happen as a result of writing code that relies on lexical scope. They just happen. 
    You do not even really have to intentionally create closures to take advantage of them.
    Closures are created and used for you all over your code.
    What you are missing is the proper mental context to recognize, embrace, and leverage closures for your own will.

    Closure is when a function can remember and access its lexical scope even when it's invoked outside its lexical scope.


loops and closures

no worky
for (var i=1; i<=5; i++) {
	setTimeout( function timer(){
		console.log( i );
	}, i*1000 );
}

worky
for (var i=1; i<=5; i++) {
	(function(){
		var j = i;
		setTimeout( function timer(){
			console.log( j );
		}, j*1000 );
	})();
}

or

different but still worky. some prefer this
for (var i=1; i<=5; i++) {
	(function(j){
		setTimeout( function timer(){
			console.log( j );
		}, j*1000 );
	})( i );
}

Block Scoping.
    look above, we used an iffe to create new scope per iteration. We actually needed a per-iteration block scope. 
    We can use let, and hijack a block and declare a variable right in the block. 
    It turns a block into a scope that we can close over. "just works"

for (var i=1; i<=5; i++) {
	let j = i; // yay, block-scope for closure!
	setTimeout( function timer(){
		console.log( j );
	}, j*1000 );
}

Then added bonus of let used in the head of a for loop. 
This behavior says that the variable will be declared not once for the loop, but each iteration.

for (let i=1; i<=5; i++) {
	setTimeout( function timer(){
		console.log( i );
	}, i*1000 );
}


Module uses closures for example
function CoolModule() {
	var something = "cool";
	var another = [1, 2, 3];

	function doSomething() {
		console.log( something );
	}

	function doAnother() {
		console.log( another.join( " ! " ) );
	}

	return {
		doSomething: doSomething,
		doAnother: doAnother
	};
}

var foo = CoolModule();

foo.doSomething(); // cool
foo.doAnother(); // 1 ! 2 ! 3

es6 modules
ES6 adds first-class syntax support for the concept of modules. 
When loaded via the module system, ES6 treats a file as a separate module. 
Each module can both import other modules or specific API members, as well export their own public API members.

function hello(who) {
	return "Let me introduce: " + who;
}

export hello;


// import only `hello()` from the "bar" module
import hello from "bar";

var hungry = "hippo";

function awesome() {
	console.log(
		hello( hungry ).toUpperCase()
	);
}
