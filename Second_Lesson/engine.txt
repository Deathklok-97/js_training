 In a traditional compiled-language processes "compilation"

    Tokenizing/Lexing
        Breaking up string of characters into meaningful (to the language) chunks, called tokens.
    
    Parsing
        Taking a stream (array) of tokens and turning it into a tree of nested elements. 
        Collectively represent the grammatical structure of the program. 
        This tree is called an "AST" (abstract syntax tree).

    Code-Generation
        The process of taking an AST and turning into executable code.

    https://www.digitalocean.com/community/tutorials/js-traversing-ast

    AST for var a = 2; 
    turn into a set of machine instructions to actually create a variable called a ( reserving memory, etc.) 
    and then store the value into a;

The Engine: responsible for start to finish compilation and execution of our JavaScript program. 
Compiler: one of the Engine's friends; handles all the dirty work of parsing and code-generation.
Scope: another friend of the Engine; collects and maintains a look-up list of all the declared identifiers(variables), 
       and enforces a strict set of rules as to how these are accessible to the currently executing code.

Two distinct actions are taken for a variable assignment: 
    First, Compiler declares a variable (if not previously declared in the current scope)
    Second, when executing, Engine looks up the variable in Scope and assigns to it, if found.

